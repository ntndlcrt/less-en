{
    "domains": [
        {
            "id": "design",
            "name": "Design",
            "sigil": "typography",
            "fields": [
                {
                    "id": "colors",
                    "name": "Colors",
                    "steps": [
                        {
                            "id": "fade",
                            "name": "Use dark or faded colors",
                            "details": "Dark colors limit the amout of light emitted by the screen. If bright colors are part of your brand identity, you should try to use faded colors instead.",
                            "tips": [
                                "Consider adding a dark mode to your website"
                            ]
                        }
                    ]
                },
                {
                    "id": "fonts",
                    "name": "Fonts",
                    "steps": [
                        {
                            "id": "system",
                            "name": "Use system fonts when possible",
                            "details": "System fonts such as Arial and Times New Roman can be used without loading any files as they are already on the users device."
                        },
                        {
                            "id": "variations",
                            "name": "Use less fonts variations",
                            "details": "When designing a website, you should limit the number of typefaces you choose and the number of different weights that you use for each typeface.",
                            "tips": [
                                "Increase the font size instead of the font weight to establish visual contrast."
                            ]
                        },
                        {
                            "id": "format",
                            "name": "Choose the right font format",
                            "details": "Instead of TTF, OFT or SVG, use WOFF or WOFF2 files that are way faster to both load and display for web browsers. Be aware that WOFF2 format is not supported by older browsers."
                        },
                        {
                            "id": "optimize",
                            "name": "Optimize fonts",
                            "details": "Subset fonts to only include the characters needed on the website."
                        }
                    ]
                },
                {
                    "id": "images",
                    "name": "Images",
                    "steps": [
                        {
                            "id": "dice",
                            "name": "Use images only when needed",
                            "details": "When designing a website, you should always ask yourself whether an image is required to achieve the effect you desire.",
                            "tips": [
                                "Convert images to dice to avoid loading any files (<a href='https://github.com/mazore/dice' target='_blank'>dice</a> / <a href='https://github.com/Chrisdf/Dice-Picture-Converter' target='_blank'>dice-picture-convertor</a> / <a href='https://github.com/pooyanzarif/Convert-Image-to-Dice-Matrix' target='_blank'>convert-image-to-dice-matrix</a>).",
                                "Replace images with vector (SVG) illustrations when possible."
                            ]
                        },
                        {
                            "id": "format",
                            "name": "Choose the right format",
                            "details": "Instead of PNG or JPEG, use WEBP or AVIF files that are way faster to both load and display for web browsers. Be aware that newer formats such as WEBP or AVIF are not supported by older browsers.",
                            "tips": [
                                "Analyze your website using <a href='https://gtmetrix.com' target='_blank'>GTmetrix</a> to see a list of images that need to be resized in the “Structure” tab’s report.",
                                "Serve multiple image versions using src, srcset and sizes HTLM attributes and the browser will choose the best one to use."
                            ]
                        },
                        {
                            "id": "compress",
                            "name": "Compress images",
                            "details": "Image editors don’t do the best job of compressing images, we advice you to use online compression tools for the best results.",
                            "tips": [
                                "Analyze your website using <a href='https://shortpixel.com/image-compression-test' target='_blank'>ShortPixel’s image compression test</a> to see a list of images that need to be optimized.",
                                "Compress your images using online compressors such as <a href='https://shortpixel.com/' target='_blank'>ShortPixel</a>.",
                                "Dither your images using <a href='https://ditherit.com/' target='_blank'>Dither it!</a> for a cool halftone effect and a reduced weight."
                            ]
                        },
                        {
                            "id": "lazy",
                            "name": "Use Lazy Load images",
                            "details": "Lazy Load images only load as the user scroll down the page instead of all at once up front. This technique greatly reduces the use of resources."
                        }
                    ]
                }
            ]
        },
        {
            "id": "development",
            "name": "Development",
            "sigil": "tags",
            "fields": [
                {
                    "id": "minification",
                    "name": "Minification",
                    "steps": [
                        {
                            "id": "stylesheets",
                            "name": "Minify \".scss/.css\" into \".min.css\"",
                            "details": "Many tools allow you to compile all of your css/scss code into a condensed single line css file, faster to both load and execute for browsers"
                        },
                        {
                            "id": "javascript",
                            "name": "Minify Javascript",
                            "details": "As for stylehseets, scripts files often use many tools for them to be more \"reader friendly\" but that will not impact the way they work, only making them harder to load. Minifying JS will, for instance, remove all useless spaces, line breaks, semicolons, unused variables..."
                        },
                        {
                            "id": "purge",
                            "name": "Purge both CSS and JS",
                            "details": "Some extensions such as TailWind JIT mode, for instance, will crawl all of your pages and only take needed CSS and JS to clean the final file from unused, yet to be loeaded, ressources. It may also be used to make a page only load its needed assets and make them faster and lighter to load and display",
                            "tips": [
                                "Use <a href='https://purgecss.com/' target='blank'>PurgeCSS</a> for instance",
                                "Check on <a href='https://tailwindcss.com/blog/just-in-time-the-next-generation-of-tailwind-css' target='blank'>TailWind JIT mode</a> to see an example of purge"
                            ]
                        },
                        {
                            "id": "images",
                            "name": "Images",
                            "details": "Multiple new images format make it possible to minify their size at the minimum without any quality drop, making them faster to load and optimized (.webp, .avif...). And even if you must stick with common formats, there are still ways to minify thoose"
                        }
                    ]
                },
                {
                    "id": "static",
                    "name": "Static content",
                    "steps": [
                        {
                            "id": "content",
                            "name": "Have as many static content/pages as possible",
                            "details": "Just having to display a text written in the code rather than fetching an API or querying a field will always be less needfull of ressources"
                        },
                        {
                            "id": "images",
                            "name": "Import images from theme",
                            "details": "Using web links or getting images from a CMS, when the image is not likely to change often, is an uneeded waste of memory"
                        },
                        {
                            "id": "assets",
                            "name": "Import assets from node_modules",
                            "details": "Many packages allow you to simply use CDN to load them, however using local packages is way more optimized"
                        },
                        {
                            "id": "local",
                            "name": "Use local variables",
                            "details": "Instead of storing your variables on your server, store them in your code with '.env' files allowing you to access the same features as you would with a web server, using less memory"
                        }
                    ]
                },
                {
                    "id": "modular",
                    "name": "Modular design",
                    "steps": [
                        {
                            "id": "components",
                            "name": "Divide website into components",
                            "details": "Whenever you see parts of your design that repeats itself (like some sections showing up on many pages, UI component like cards used in multiple contexts or even similar parts with just few differences) try making that a single template file which you call when needed. This will decrease your code length, making it easier to load."
                        },
                        {
                            "id": "js",
                            "name": "Custom scripts",
                            "details": "Sometimes, a script is made just for one component ; for instance, a script that handles an interactive map is only needed when there is a map. Instead of making a script called on every single page, try to load it inside your component, making it called only when needed (or find a solution for it to be loeaded only if a map component is seen in the DOM)"
                        },
                        {
                            "id": "css",
                            "name": "Custom styles",
                            "details": "With comdular design comes modular styling. By doing so, you make CSS being called only when the component it's related to is in the page, making less ressources to load on many pages.",
                            "tips": [
                                "See this <a href='https://github.com/css-modules/css-modules' target='blank'>github page</a> for examples of modular CSS"
                            ]
                        },
                        {
                            "id": "import",
                            "name": "Import only when needed",
                            "details": "When checking the Chrome console, you often see many things being loaded although they are not needed in anyway in the given context. By making sure any asset is loaded if and only if needed, you reduce the amount of energy needed to display your page."
                        }
                    ]
                },
                {
                    "id": "css",
                    "name": "CSS",
                    "steps": [
                        {
                            "id": "oocss",
                            "name": "Use Object Oriented CSS (OOCSS)",
                            "details": "CSS helps you create classes to which you assign properties and then make every element using this class inherit the properties. OOCSS is a bit different. To each property you create a class and assign many classes to elements to combine them. By doing so, you limitate your CSS code and make every page load the same class multiple times but read the property only once"
                        },
                        {
                            "id": "critical",
                            "name": "Set-up critical CSS",
                            "details": "Critical CSS is a tool that will make CSS properties loaded only when needed (in other words, when the elements are visible in the viewport). Used to improove performances it also helps a lot when it comes to data loading and, therefore, energy loss"
                        }
                    ]
                },
                {
                    "id": "js",
                    "name": "JavaScript",
                    "steps": [
                        {
                            "id": "functions",
                            "name": "Use anonymous functions",
                            "details": "When needed only once, a function can be declared directly when needed - \"() => {}\" for instance - and save memory space by not being stored as a callable function"
                        },
                        {
                            "id": "cache",
                            "name": "Store in cache",
                            "details": "When an object is often used in your code, try making it a cache accessible variable in order to repeat less code. For instance, localStorage allow you to store data on the client side, making the server side way lighter"
                        },
                        {
                            "id": "dom",
                            "name": "Avoid DOM transformations as much as possible"
                        }
                    ]
                },
                {
                    "id": "php",
                    "name": "PHP",
                    "steps": [
                        {
                            "id": "variables",
                            "name": "Avoid useless variables assignations",
                            "details": "Sometimes, in order to facilitate code reading, we may assign clear variable names to otherwise difficult to understand names/functions. However, by doing so, we ask memory to assign and store a variable which, in some cases, doesn't add much besides readability. Avoiding this will lighten the memory required in the site"
                        },
                        {
                            "id": "functions",
                            "name": "Use functions when needed",
                            "details": "Creating functions sometimes help you make better coding and fasten up algorithms. But, in some cases, using a third party function isn't as usefull as thought. For instance, a function that returns a file src using its id by calling a native Wordpress method won't be usefull as you can use the Wordpress method directly"
                        },
                        {
                            "id": "abstract",
                            "name": "Create Abstract Classes",
                            "details": "Everytime you start repeating same code too many times, think about writing it only once and call an instance of it when needed. PHP classes allow you to use Abstract classes, for instance. Each class that extends the Abstract Class will then inherit its methods and allow you to write them only once and cleaning the code to make it lighter"
                        },
                        {
                            "id": "unset",
                            "name": "Unset variables if not needed elsewhere",
                            "details": "Creating variables will help you throw a function only once, for instance, and use its result many times inside your file. you may consider unsetting this variable after it's been used since, sometimes, it won't be needed anywhere else. By doing so, you will free many memory resources"
                        }
                    ]
                }
            ]
        },
        {
            "id": "hosting",
            "name": "Hosting",
            "sigil": "www",
            "fields": [
                {
                    "id": "green",
                    "name": "Green host",
                    "steps": [
                        {
                            "id": "policy",
                            "name": "Search for public sustainability/environmental policy",
                            "details": "One of the first steps is to check if your host has any sort of caring for the environment. Ecosia, a green search engine, reaches users by stating how they plant trees in deforested areas depending on the number of searches you make on it. If your host has no intention to communicate about something like that, it's not a good sign."
                        },
                        {
                            "id": "energy",
                            "name": "Does it use green energy and/or carbon offsets ?",
                            "details": "There is a difference between using renewable energy and carbon offsets to supply facilities. You may try to find out how they provide energy on their website and compare its sustainability to other hosts."
                        },
                        {
                            "id": "pue",
                            "name": "Verify the PUE rating of the data centers",
                            "details": "Power Usage Effectivness (PUE) is a standard energy efficiency, comparing energy used for computers and the one used for lights, coolers... you want to go for a host who is transparent about PUE and, in the best scenarios, has a very low rating (perfect being 1.0). It is not a perfect rating and should not be considered the most important thing to check for but is not to be ignored even so."
                        },
                        {
                            "id": "tools",
                            "name": "Seek software efficiency",
                            "details": "A host using the latest PHP versions will need less server resources to achieve its goals, for instance. These technical details can and do make a difference."
                        }
                    ]
                }
            ]
        }
    ]
}